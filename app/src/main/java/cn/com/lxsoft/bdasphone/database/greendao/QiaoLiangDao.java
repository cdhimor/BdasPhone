package cn.com.lxsoft.bdasphone.database.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.lxsoft.bdasphone.entity.DanWei;
import cn.com.lxsoft.bdasphone.entity.LuXian;

import cn.com.lxsoft.bdasphone.entity.QiaoLiang;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QIAO_LIANG".
*/
public class QiaoLiangDao extends AbstractDao<QiaoLiang, Long> {

    public static final String TABLENAME = "QIAO_LIANG";

    /**
     * Properties of entity QiaoLiang.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DaiMa = new Property(1, String.class, "daiMa", false, "DAI_MA");
        public final static Property MingCheng = new Property(2, String.class, "mingCheng", false, "MING_CHENG");
        public final static Property LeiXing = new Property(3, String.class, "leiXing", false, "LEI_XING");
        public final static Property JieGou = new Property(4, String.class, "jieGou", false, "JIE_GOU");
        public final static Property DanWeiID = new Property(5, String.class, "danWeiID", false, "DAN_WEI_ID");
        public final static Property LuXianID = new Property(6, String.class, "luXianID", false, "LU_XIAN_ID");
        public final static Property ZhuangHao = new Property(7, float.class, "zhuangHao", false, "ZHUANG_HAO");
        public final static Property QiaoChang = new Property(8, float.class, "qiaoChang", false, "QIAO_CHANG");
        public final static Property QiaoKuan = new Property(9, float.class, "qiaoKuan", false, "QIAO_KUAN");
        public final static Property QiaoGao = new Property(10, float.class, "qiaoGao", false, "QIAO_GAO");
        public final static Property PingJi = new Property(11, int.class, "pingJi", false, "PING_JI");
    }

    private DaoSession daoSession;


    public QiaoLiangDao(DaoConfig config) {
        super(config);
    }
    
    public QiaoLiangDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QIAO_LIANG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DAI_MA\" TEXT NOT NULL UNIQUE ," + // 1: daiMa
                "\"MING_CHENG\" TEXT," + // 2: mingCheng
                "\"LEI_XING\" TEXT," + // 3: leiXing
                "\"JIE_GOU\" TEXT," + // 4: jieGou
                "\"DAN_WEI_ID\" TEXT," + // 5: danWeiID
                "\"LU_XIAN_ID\" TEXT," + // 6: luXianID
                "\"ZHUANG_HAO\" REAL NOT NULL ," + // 7: zhuangHao
                "\"QIAO_CHANG\" REAL NOT NULL ," + // 8: qiaoChang
                "\"QIAO_KUAN\" REAL NOT NULL ," + // 9: qiaoKuan
                "\"QIAO_GAO\" REAL NOT NULL ," + // 10: qiaoGao
                "\"PING_JI\" INTEGER NOT NULL );"); // 11: pingJi
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QIAO_LIANG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QiaoLiang entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDaiMa());
 
        String mingCheng = entity.getMingCheng();
        if (mingCheng != null) {
            stmt.bindString(3, mingCheng);
        }
 
        String leiXing = entity.getLeiXing();
        if (leiXing != null) {
            stmt.bindString(4, leiXing);
        }
 
        String jieGou = entity.getJieGou();
        if (jieGou != null) {
            stmt.bindString(5, jieGou);
        }
 
        String danWeiID = entity.getDanWeiID();
        if (danWeiID != null) {
            stmt.bindString(6, danWeiID);
        }
 
        String luXianID = entity.getLuXianID();
        if (luXianID != null) {
            stmt.bindString(7, luXianID);
        }
        stmt.bindDouble(8, entity.getZhuangHao());
        stmt.bindDouble(9, entity.getQiaoChang());
        stmt.bindDouble(10, entity.getQiaoKuan());
        stmt.bindDouble(11, entity.getQiaoGao());
        stmt.bindLong(12, entity.getPingJi());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QiaoLiang entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDaiMa());
 
        String mingCheng = entity.getMingCheng();
        if (mingCheng != null) {
            stmt.bindString(3, mingCheng);
        }
 
        String leiXing = entity.getLeiXing();
        if (leiXing != null) {
            stmt.bindString(4, leiXing);
        }
 
        String jieGou = entity.getJieGou();
        if (jieGou != null) {
            stmt.bindString(5, jieGou);
        }
 
        String danWeiID = entity.getDanWeiID();
        if (danWeiID != null) {
            stmt.bindString(6, danWeiID);
        }
 
        String luXianID = entity.getLuXianID();
        if (luXianID != null) {
            stmt.bindString(7, luXianID);
        }
        stmt.bindDouble(8, entity.getZhuangHao());
        stmt.bindDouble(9, entity.getQiaoChang());
        stmt.bindDouble(10, entity.getQiaoKuan());
        stmt.bindDouble(11, entity.getQiaoGao());
        stmt.bindLong(12, entity.getPingJi());
    }

    @Override
    protected final void attachEntity(QiaoLiang entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QiaoLiang readEntity(Cursor cursor, int offset) {
        QiaoLiang entity = new QiaoLiang( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // daiMa
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mingCheng
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // leiXing
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // jieGou
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // danWeiID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // luXianID
            cursor.getFloat(offset + 7), // zhuangHao
            cursor.getFloat(offset + 8), // qiaoChang
            cursor.getFloat(offset + 9), // qiaoKuan
            cursor.getFloat(offset + 10), // qiaoGao
            cursor.getInt(offset + 11) // pingJi
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QiaoLiang entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDaiMa(cursor.getString(offset + 1));
        entity.setMingCheng(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLeiXing(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setJieGou(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDanWeiID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLuXianID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setZhuangHao(cursor.getFloat(offset + 7));
        entity.setQiaoChang(cursor.getFloat(offset + 8));
        entity.setQiaoKuan(cursor.getFloat(offset + 9));
        entity.setQiaoGao(cursor.getFloat(offset + 10));
        entity.setPingJi(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QiaoLiang entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QiaoLiang entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QiaoLiang entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDanWeiDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getLuXianDao().getAllColumns());
            builder.append(" FROM QIAO_LIANG T");
            builder.append(" LEFT JOIN DAN_WEI T0 ON T.\"DAN_WEI_ID\"=T0.\"DAI_MA\"");
            builder.append(" LEFT JOIN LU_XIAN T1 ON T.\"LU_XIAN_ID\"=T1.\"BIAN_HAO\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected QiaoLiang loadCurrentDeep(Cursor cursor, boolean lock) {
        QiaoLiang entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DanWei danWei = loadCurrentOther(daoSession.getDanWeiDao(), cursor, offset);
        entity.setDanWei(danWei);
        offset += daoSession.getDanWeiDao().getAllColumns().length;

        LuXian luXian = loadCurrentOther(daoSession.getLuXianDao(), cursor, offset);
        entity.setLuXian(luXian);

        return entity;    
    }

    public QiaoLiang loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<QiaoLiang> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<QiaoLiang> list = new ArrayList<QiaoLiang>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<QiaoLiang> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<QiaoLiang> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
