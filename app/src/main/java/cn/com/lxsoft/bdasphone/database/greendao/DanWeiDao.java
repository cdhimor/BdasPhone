package cn.com.lxsoft.bdasphone.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.lxsoft.bdasphone.entity.DanWei;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAN_WEI".
*/
public class DanWeiDao extends AbstractDao<DanWei, String> {

    public static final String TABLENAME = "DAN_WEI";

    /**
     * Properties of entity DanWei.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DaiMa = new Property(0, String.class, "daiMa", true, "DAI_MA");
        public final static Property MingCheng = new Property(1, String.class, "mingCheng", false, "MING_CHENG");
    }


    public DanWeiDao(DaoConfig config) {
        super(config);
    }
    
    public DanWeiDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAN_WEI\" (" + //
                "\"DAI_MA\" TEXT PRIMARY KEY NOT NULL ," + // 0: daiMa
                "\"MING_CHENG\" TEXT);"); // 1: mingCheng
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAN_WEI\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DanWei entity) {
        stmt.clearBindings();
 
        String daiMa = entity.getDaiMa();
        if (daiMa != null) {
            stmt.bindString(1, daiMa);
        }
 
        String mingCheng = entity.getMingCheng();
        if (mingCheng != null) {
            stmt.bindString(2, mingCheng);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DanWei entity) {
        stmt.clearBindings();
 
        String daiMa = entity.getDaiMa();
        if (daiMa != null) {
            stmt.bindString(1, daiMa);
        }
 
        String mingCheng = entity.getMingCheng();
        if (mingCheng != null) {
            stmt.bindString(2, mingCheng);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DanWei readEntity(Cursor cursor, int offset) {
        DanWei entity = new DanWei( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // daiMa
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // mingCheng
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DanWei entity, int offset) {
        entity.setDaiMa(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMingCheng(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DanWei entity, long rowId) {
        return entity.getDaiMa();
    }
    
    @Override
    public String getKey(DanWei entity) {
        if(entity != null) {
            return entity.getDaiMa();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DanWei entity) {
        return entity.getDaiMa() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
