package cn.com.lxsoft.bdasphone.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.lxsoft.bdasphone.entity.LuXian;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LU_XIAN".
*/
public class LuXianDao extends AbstractDao<LuXian, String> {

    public static final String TABLENAME = "LU_XIAN";

    /**
     * Properties of entity LuXian.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BianHao = new Property(0, String.class, "bianHao", true, "BIAN_HAO");
        public final static Property MingCheng = new Property(1, String.class, "mingCheng", false, "MING_CHENG");
        public final static Property DengJi = new Property(2, String.class, "dengJi", false, "DENG_JI");
    }


    public LuXianDao(DaoConfig config) {
        super(config);
    }
    
    public LuXianDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LU_XIAN\" (" + //
                "\"BIAN_HAO\" TEXT PRIMARY KEY NOT NULL ," + // 0: bianHao
                "\"MING_CHENG\" TEXT," + // 1: mingCheng
                "\"DENG_JI\" TEXT);"); // 2: dengJi
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LU_XIAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LuXian entity) {
        stmt.clearBindings();
 
        String bianHao = entity.getBianHao();
        if (bianHao != null) {
            stmt.bindString(1, bianHao);
        }
 
        String mingCheng = entity.getMingCheng();
        if (mingCheng != null) {
            stmt.bindString(2, mingCheng);
        }
 
        String dengJi = entity.getDengJi();
        if (dengJi != null) {
            stmt.bindString(3, dengJi);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LuXian entity) {
        stmt.clearBindings();
 
        String bianHao = entity.getBianHao();
        if (bianHao != null) {
            stmt.bindString(1, bianHao);
        }
 
        String mingCheng = entity.getMingCheng();
        if (mingCheng != null) {
            stmt.bindString(2, mingCheng);
        }
 
        String dengJi = entity.getDengJi();
        if (dengJi != null) {
            stmt.bindString(3, dengJi);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public LuXian readEntity(Cursor cursor, int offset) {
        LuXian entity = new LuXian( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // bianHao
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mingCheng
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // dengJi
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LuXian entity, int offset) {
        entity.setBianHao(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMingCheng(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDengJi(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(LuXian entity, long rowId) {
        return entity.getBianHao();
    }
    
    @Override
    public String getKey(LuXian entity) {
        if(entity != null) {
            return entity.getBianHao();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LuXian entity) {
        return entity.getBianHao() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
